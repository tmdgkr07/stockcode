"use strict";
/**
 * Created by archethic on 2021/08/07
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _KakaoLinkClient_cookieJar, _KakaoLinkClient_apiKey, _KakaoLinkClient_url;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KakaoLinkClient = void 0;
const axios_1 = __importDefault(require("axios"));
const axios_cookiejar_support_1 = __importDefault(require("axios-cookiejar-support"));
const cheerio_1 = require("cheerio");
const config_1 = require("../config");
(0, axios_cookiejar_support_1.default)(axios_1.default);
class KakaoLinkClient {
    constructor() {
        _KakaoLinkClient_cookieJar.set(this, void 0);
        _KakaoLinkClient_apiKey.set(this, '');
        _KakaoLinkClient_url.set(this, '');
    }
    async login(loginRes) {
        __classPrivateFieldSet(this, _KakaoLinkClient_cookieJar, loginRes.cookieJar, "f");
        __classPrivateFieldSet(this, _KakaoLinkClient_apiKey, loginRes.apiKey, "f");
        __classPrivateFieldSet(this, _KakaoLinkClient_url, loginRes.url, "f");
    }
    async sendLink(roomName, params, type) {
        var _a;
        const getLinkRes = await (0, axios_1.default)({
            method: 'POST',
            url: config_1.LinkConfig.getLoginUrl,
            data: {
                app_key: __classPrivateFieldGet(this, _KakaoLinkClient_apiKey, "f"),
                validation_action: type || 'custom',
                validation_params: JSON.stringify(params),
                ka: `sdk/1.25.7 os/javascript lang/ko-kr device/MacIntel origin/${encodeURIComponent(__classPrivateFieldGet(this, _KakaoLinkClient_url, "f") || 'https://developers.kakao.com')}`
            },
            jar: __classPrivateFieldGet(this, _KakaoLinkClient_cookieJar, "f"),
            withCredentials: true
        }).then((res) => res).catch((err) => err.response);
        if ((getLinkRes === null || getLinkRes === void 0 ? void 0 : getLinkRes.status) !== 200) {
            return {
                success: false,
                status: getLinkRes === null || getLinkRes === void 0 ? void 0 : getLinkRes.status,
                message: 'While preparing to send Kakao Link, an unknown error occurred. Please refer to error.md by referring to the status code.'
            };
        }
        const $ = (0, cheerio_1.load)(getLinkRes.data);
        const LinkParams = $('#validatedTalkLink').attr('value');
        const csrfToken = (_a = $('div').last().attr('ng-init')) === null || _a === void 0 ? void 0 : _a.slice(7).replace("'", '');
        const roomData = await (0, axios_1.default)({
            method: 'GET',
            url: config_1.LinkConfig.getChatData,
            headers: {
                Referer: config_1.LinkConfig.getLoginUrl,
                'Csrf-Token': csrfToken,
                'App-Key': __classPrivateFieldGet(this, _KakaoLinkClient_apiKey, "f")
            },
            responseType: 'json',
            jar: __classPrivateFieldGet(this, _KakaoLinkClient_cookieJar, "f"),
            withCredentials: true
        }).then((res) => res).catch((err) => err.response);
        let id, count = null;
        roomData === null || roomData === void 0 ? void 0 : roomData.data['chats'].map(e => {
            if (e.title === roomName) {
                id = e.id;
                count = e.memberCount;
                return;
            }
        });
        if (id === null || count === null) {
            return {
                success: false,
                status: -250,
                message: 'No room to send Kakao Link was found. Please check the room again'
            };
        }
        const sendLinkRes = await (0, axios_1.default)({
            method: 'POST',
            url: config_1.LinkConfig.sendLinkUrl,
            headers: {
                Referer: config_1.LinkConfig.getLoginUrl,
                'App-Key': __classPrivateFieldGet(this, _KakaoLinkClient_apiKey, "f"),
                'Csrf-Token': csrfToken,
                'Content-Type': 'application/json;charset=UTF-8'
            },
            data: JSON.stringify({
                validatedTalkLink: JSON.parse(LinkParams),
                securityKey: roomData === null || roomData === void 0 ? void 0 : roomData.data['securityKey'],
                receiverType: 'chat',
                receiverIds: [id],
                receiverChatRoomMemberCount: [count]
            }),
            jar: __classPrivateFieldGet(this, _KakaoLinkClient_cookieJar, "f"),
            withCredentials: true
        }).then((res) => res).catch((err) => err.response);
        if ((sendLinkRes === null || sendLinkRes === void 0 ? void 0 : sendLinkRes.status) !== 200) {
            return {
                success: false,
                status: sendLinkRes === null || sendLinkRes === void 0 ? void 0 : sendLinkRes.status,
                message: 'An error occurred while sending Kakao Link. Please refer to error.md with status code'
            };
        }
        return {
            success: true,
            status: sendLinkRes.status,
            result: JSON.parse(LinkParams)
        };
    }
}
exports.KakaoLinkClient = KakaoLinkClient;
_KakaoLinkClient_cookieJar = new WeakMap(), _KakaoLinkClient_apiKey = new WeakMap(), _KakaoLinkClient_url = new WeakMap();
