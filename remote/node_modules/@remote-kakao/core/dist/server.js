"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dgram_1 = require("dgram");
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const logger_1 = require("./logger");
const message_1 = __importDefault(require("./message"));
class Server extends eventemitter3_1.default {
    socket = (0, dgram_1.createSocket)('udp4');
    port = 3000;
    sessionEmitter;
    plugins = [];
    constructor() {
        super();
        this.sessionEmitter = new eventemitter3_1.default();
    }
    usePlugin(Plugin, pluginOptions, enableLog = true) {
        const plugin = new Plugin(this, pluginOptions);
        if (plugin.extendServerClass)
            plugin.extendServerClass(this);
        if (plugin.onReady)
            this.on('ready', plugin.onReady);
        if (plugin.onMessage)
            this.on('message', (message) => {
                if (plugin.extendMessageClass)
                    plugin.extendMessageClass(message);
                if (plugin.onMessage)
                    plugin.onMessage(message);
            });
        this.plugins.push(plugin);
        if (enableLog)
            (0, logger_1.rkLog)(`Plugin ${(0, logger_1.rkColor)(plugin.constructor.name)} enabled!`);
        return plugin;
    }
    async start(port = 3000) {
        this.port = port;
        this.socket.bind(this.port);
        this.socket.on('message', (msg, remoteInfo) => {
            const { event, session, success, data } = JSON.parse(msg.toString());
            if (event && !session)
                switch (event) {
                    case 'chat':
                        const message = new message_1.default(data, this.sessionEmitter, this.socket, remoteInfo);
                        this.plugins.forEach((plugin) => {
                            if (plugin.extendMessageClass)
                                plugin.extendMessageClass(message);
                        });
                        this.emit('message', message);
                        break;
                }
            else
                this.sessionEmitter.emit(session, success, data);
        });
        this.emit('ready', this.port);
    }
}
exports.default = Server;
